package com.ar.user.service.services.impl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ar.user.service.entities.Hotel;
import com.ar.user.service.entities.Rating;
import com.ar.user.service.entities.User;
import com.ar.user.service.exceptions.ResourceNotFoundException;
import com.ar.user.service.feign.HotelService;
import com.ar.user.service.feign.RatingService;
import com.ar.user.service.repositories.UserRepository;
import com.ar.user.service.services.userService;

@Service
public class UserServiceImpl implements userService {

	@Autowired
	private UserRepository repository;
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private HotelService hotelService;
	
	@Autowired
	private RatingService ratingService;
	
	private static final Logger log = LoggerFactory.getLogger(UserServiceImpl.class);

	@Override
	public User saveUser(User user) {
		//Generate unique userId
		String randomUserId = UUID.randomUUID().toString();
		user.setUserId(randomUserId);
		return repository.save(user);
	}

	@Override
	public List<User> getAllUser() {
		//implementing rating service call: using Rest Template
		return  repository.findAll();
	}

	@Override
	public User getUser(String userId) {
		//get user from database with the help of user repository
		User user = repository.findById(userId).orElseThrow(
					()->new ResourceNotFoundException("User with given id not found on server !!"));
		//fetch rating of the above user from Rating Service
		//http://localhost:8083/ratings/users/4037de0b-bfa2-46f7-be9a-dc2be85533eb
		
		//Rating[] ratingsOfUser = restTemplate.getForObject("http://RATING-SERVICE/ratings/users/"+user.getUserId(),Rating[].class);
		//List<Rating> ratings = Arrays.stream(ratingsOfUser).toList();
		
		ResponseEntity<List<Rating>> ratingByUserId = ratingService.getRatingByUserId(user.getUserId());
		List<Rating> listOfRating = ratingByUserId.getBody();
		
		List<Rating> ratingList = listOfRating.stream().map(rating->{
			//api call to hotel service to get the hotel
			//http://localhost:8082/hotels/07af5b1a-a118-4af9-a398-a342acb4180d

			//Hotel hotel = restTemplate.getForObject("http://HOTEL-SERVICE/hotels/"+rating.getHotelId(),Hotel.class);
			
			Hotel hotel = hotelService.getHotel(rating.getHotelId());
			
			//set the hotel to rating
			rating.setHotel(hotel);
			//return the rating
			return rating;
			
		}).collect(Collectors.toList());
		
		user.setRatings(ratingList);
		return user;
	}

}
